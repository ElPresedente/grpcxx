#include "grpcxx.h"

#include <fmt/core.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream.h>

bool Grpcxx::Generate(
	const google::protobuf::FileDescriptor *file, const std::string &parameter,
	google::protobuf::compiler::GeneratorContext *context, std::string *error) const {

	std::string output = fmt::format(
		R"(// Code generated by protoc-gen-grpcxx.
// Versions:
//   - protoc-gen-grpcxx: {}

#pragma once

#include "{}"
)",
		"0.0.0",
		google::protobuf::compiler::StripProto(file->name()) + ".pb.h");

	if (!file->package().empty()) {
		output += '\n';

		std::size_t start = 0;
		for (auto end = file->package().find('.'); end != std::string::npos;
			 end      = file->package().find('.', start)) {

			output += fmt::format("namespace {} {{\n", file->package().substr(start, end - start));
			start   = end + 1;
		}
		output += fmt::format("namespace {} {{\n", file->package().substr(start));
	}

	// TODO: service

	if (!file->package().empty()) {
		auto end = file->package().size();
		for (auto pos = file->package().rfind('.'); pos != std::string::npos;
			 pos      = file->package().rfind('.', end)) {

			output +=
				fmt::format("}} // namespace {}\n", file->package().substr(pos + 1, end - pos));
			end = pos - 1;
		}
		output += fmt::format("}} // namespace {}\n", file->package().substr(0, end + 1));
	}

	std::unique_ptr<google::protobuf::io::ZeroCopyOutputStream> ostream(
		context->Open(google::protobuf::compiler::StripProto(file->name()) + ".grpcxx.pb.h"));

	google::protobuf::io::CodedOutputStream costream(ostream.get());
	costream.WriteRaw(output.data(), output.size());

	return true;
}
